package view

import (
	"fmt"
	"strings"
)

type FieldType int

const (
	Text FieldType = iota
	Number
	Boolean
)

type Field struct {
	Name        string
	Type        FieldType
	Default     string
	Description string
	Array       bool
}

templ form(command string, fields []Field, save bool) {
	<script type="text/javascript">
	function addField(id) {
	    var src = document.getElementById(id);
		if (src) {
			var cloned = src.cloneNode(true);
			cloned.removeAttribute('id');
			// Set defatult value
			var clonedInput = cloned.querySelector('input');
			clonedInput.value = "";
			// Display the remove button
			var removeButton = cloned.querySelector('button');
			removeButton.classList.remove('hidden');
			// Insert the cloned input as the last sibling
			src.parentNode.appendChild(cloned);
		} else {
			console.error('Element with ID "' + id + '" not found.');
		}
	}
	</script>
	<form>
		<input type="hidden" id="command" name="command" value={ command }/>
		<div class="space-y-12">
			<div class="border-b border-gray-900/10 pb-12">
				if len(fields) == 0 {
					<p class="text-gray-500">No parameters needed</p>
				} else {
					<div class="mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6">
						for _, f := range fields {
							switch f.Type {
								case Number:
									@numberField(f)
								case Boolean:
									@booleanField(f)
								default:
									@textField(f)
							}
						}
					</div>
				}
			</div>
		</div>
		<div class="mt-6 flex items-center justify-end gap-x-6">
			if save {
				<button
					hx-get={ "/commands/" + command + "?default" }
					hx-target="#content"
					hx-select="#content"
					hx-swap="outerHTML"
					class="inline-flex items-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
				>Reset</button>
				<button
					hx-post="/save"
					hx-target="form"
					hx-swap="afterend"
					class="inline-flex items-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
				>Save</button>
			}
			<button
				hx-post="/run"
				hx-target="#content"
				hx-select="#content"
				hx-swap="outerHTML"
				type="submit"
				class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
			>Launch</button>
		</div>
	</form>
	<div id="modal"></div>
}

templ textField(f Field) {
	<div class="sm:col-span-4">
		<label for="username" class="block text-sm font-medium leading-6 text-gray-900">{ f.Name }</label>
		<div class="mt-2">
			<div class="space-y-2">
				for i, f := range toArray(f) {
					<div
						if (i == 0) {
							id={ f.Name }
						}
						class="flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 sm:max-w-md"
					>
						<input
							type="text"
							name={ f.Name }
							autocomplete={ f.Name }
							class="block flex-1 border-0 bg-transparent py-1.5 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
							value={ f.Default }
						/>
						@removeButton(i == 0)
					</div>
				}
			</div>
			if f.Array {
				<button
					type="button"
					onclick={ templ.ComponentScript{Call: fmt.Sprintf("addField('%s')", f.Name)} }
					class="flex items-center justify-center mt-2 px-4 py-2 bg-indigo-600 text-white font-semibold text-sm rounded-md shadow-sm hover:bg-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-600 focus:ring-offset-2 sm:max-w-md"
				>
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-4">
						<path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15"></path>
					</svg>
				</button>
			}
			if f.Description != "" {
				<p class="mt-2 text-sm text-gray-500" id="email-description">{ f.Description }</p>
			}
		</div>
	</div>
}

templ numberField(f Field) {
	<div class="sm:col-span-4">
		<label for={ f.Name } class="block text-sm font-medium leading-6 text-gray-900">{ f.Name }</label>
		<div class="mt-2">
			<div
				class="flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 sm:max-w-md"
			>
				<input
					type="number"
					name={ f.Name }
					id={ f.Name }
					autocomplete={ f.Name }
					class="block flex-1 border-0 bg-transparent py-1.5 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
					value={ f.Default }
				/>
			</div>
			if f.Description != "" {
				<p class="mt-2 text-sm text-gray-500" id="{ f.Name }-description">{ f.Description }</p>
			}
		</div>
	</div>
}

templ booleanField(f Field) {
	<div class="sm:col-span-4">
		<div class="mt-2">
			<div class="flex items-center">
				<input
					type="checkbox"
					name={ f.Name }
					id={ f.Name }
					class="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500"
					if f.Default == "true" {
						checked
					}
				/>
				<label for={ f.Name } class="ml-2 block text-sm font-medium leading-6 text-gray-900">
					{ f.Name }
				</label>
			</div>
			if f.Description != "" {
				<p class="mt-2 text-sm text-gray-500" id="{ f.Name }-description">{ f.Description }</p>
			}
		</div>
	</div>
}

func toArray(f Field) []Field {
	if !f.Array {
		return []Field{f}
	}
	defValues := strings.Split(strings.Trim(f.Default, "[]"), ",")
	var fields []Field
	for _, v := range defValues {
		fields = append(fields, Field{
			Name:        f.Name,
			Type:        f.Type,
			Default:     v,
			Description: f.Description,
			Array:       false,
		})
	}
	return fields
}

templ removeButton(hidden bool) {
	<button
		onclick="this.parentNode.remove()"
		type="button"
		class={ templ.KV("hidden", hidden), 
		"relative -ml-px inline-flex items-center gap-x-1.5 rounded-r-md px-2 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50" }
	>
		<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-4">
			<path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12"></path>
		</svg>
	</button>
}

templ Form(app string, command string, fields []Field, save bool) {
	@page(app, fmt.Sprintf("Launch '%s'", command)) {
		@form(command, fields, save)
	}
}
